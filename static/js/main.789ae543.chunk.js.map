{"version":3,"sources":["components/InfoBox/InfoBox.js","utils/util.js","components/Map/Map.js","components/Table/Table.js","components/LineGraph/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","isRed","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","halp_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sortType","sortedData","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","tableData","setTableData","setCountry","setCountryInfo","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","setSortType","document","name","iso2","getCountries","onCountryChange","event","countryCode","target","undefined","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.789ae543.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport numeral from \"numeral\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, isRed, active, ...props }) {\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204,16,52)\",\r\n    halp_op: \"rgba(204,16,52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125,215,29)\",\r\n    halp_op: \"rgba(125,215,29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251,68,67)\",\r\n    halp_op: \"rgba(251,68,67,0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const sortData = (data, sortType = \"desc\") => {\r\n  const sortedData = [...data];\r\n\r\n  return sortedData.sort((a, b) => {\r\n    if (sortType === \"desc\") {\r\n      return a.cases > b.cases ? -1 : 1;\r\n    } else {\r\n      return a.cases < b.cases ? -1 : 1;\r\n    }\r\n  });\r\n};\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"../../utils/util\";\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy: <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor:\r\n                  casesType === \"recovered\"\r\n                    ? \"rgba(125,215,29, 0.5)\"\r\n                    : \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: casesType === \"recovered\" ? \"#7dd71d\" : \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Select,\r\n  MenuItem,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport InfoBox from \"./components/InfoBox/InfoBox\";\r\nimport Map from \"./components/Map/Map\";\r\nimport Table from \"./components/Table/Table\";\r\nimport { sortData, prettyPrintStat } from \"./utils/util\";\r\nimport LineGraph from \"./components/LineGraph/LineGraph\";\r\nimport \"leaflet/dist/leaflet.css\";\r\n\r\nfunction App() {\r\n  const [countries, setCountries] = useState([]);\r\n  const [tableData, setTableData] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n  const [countryInfo, setCountryInfo] = useState({});\r\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\r\n  const [mapZoom, setMapZoom] = useState(3);\r\n  const [mapCountries, setMapCountries] = useState([]);\r\n  const [casesType, setCasesType] = useState(\"cases\");\r\n  const [sortType, setSortType] = useState(\"desc\");\r\n\r\n  useEffect(() => {\r\n    document.title = \"COVID-19-STATS\";\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetch(\"https://disease.sh/v3/covid-19/all\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountryInfo(data);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    const getCountries = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          const countries = data.map((country) => ({\r\n            name: country.country,\r\n            value: country.countryInfo.iso2,\r\n          }));\r\n          const sortedData = sortData(data, sortType);\r\n          setTableData(sortedData);\r\n          setCountries(countries);\r\n          setMapCountries(data);\r\n        });\r\n    };\r\n    getCountries();\r\n  }, [sortType]);\r\n\r\n  const onSortChange = (e) => setSortType(e.target.value);\r\n\r\n  const onCountryChange = async (event) => {\r\n    const countryCode = event.target.value;\r\n    setCountry(countryCode);\r\n\r\n    const url =\r\n      countryCode === \"worldwide\"\r\n        ? \"https://disease.sh/v3/covid-19/all\"\r\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\r\n\r\n    await fetch(url)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setCountry(countryCode);\r\n        setCountryInfo(data);\r\n        if (data.countryInfo !== undefined) {\r\n          setMapCenter([data?.countryInfo?.lat, data?.countryInfo?.long]);\r\n        } else {\r\n          setMapCenter([34.80746, -40.4796]);\r\n        }\r\n        setMapZoom(3);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"app__body\">\r\n        <div className=\"app__left\">\r\n          <div className=\"app__header\">\r\n            <h1>COVID-19 STATS</h1>\r\n            <FormControl className=\"app__dropdown\">\r\n              <Select\r\n                variant=\"outlined\"\r\n                value={country}\r\n                onChange={onCountryChange}\r\n              >\r\n                <MenuItem value=\"worldwide\">Worlwide</MenuItem>\r\n                {countries.map((country) => (\r\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </div>\r\n\r\n          <div className=\"app__stats\">\r\n            <InfoBox\r\n              isRed\r\n              active={casesType === \"cases\"}\r\n              onClick={(e) => setCasesType(\"cases\")}\r\n              title=\"Coronovirus Cases\"\r\n              cases={prettyPrintStat(countryInfo.todayCases)}\r\n              total={prettyPrintStat(countryInfo.cases)}\r\n            ></InfoBox>\r\n            <InfoBox\r\n              active={casesType === \"recovered\"}\r\n              onClick={(e) => setCasesType(\"recovered\")}\r\n              title=\"Recovered Cases\"\r\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n              total={prettyPrintStat(countryInfo.recovered)}\r\n            ></InfoBox>\r\n            <InfoBox\r\n              isRed\r\n              active={casesType === \"deaths\"}\r\n              onClick={(e) => setCasesType(\"deaths\")}\r\n              title=\"Deaths Cases\"\r\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n              total={prettyPrintStat(countryInfo.deaths)}\r\n            ></InfoBox>\r\n          </div>\r\n          <Map\r\n            casesType={casesType}\r\n            countries={mapCountries}\r\n            center={mapCenter}\r\n            zoom={mapZoom}\r\n          />\r\n        </div>\r\n\r\n        <Card className=\"app__right\">\r\n          <CardContent className=\"app__rightCardContent\">\r\n            <div className=\"app__rightCardContentHeader\">\r\n              <h3>Live cases by country</h3>\r\n              <FormControl className=\"app__dropdown\">\r\n                <Select\r\n                  variant=\"outlined\"\r\n                  value={sortType}\r\n                  onChange={onSortChange}\r\n                >\r\n                  <MenuItem value=\"desc\">Desc</MenuItem>\r\n                  <MenuItem value=\"asc\">Asc</MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n            </div>\r\n            <Table countries={tableData}></Table>\r\n            <h3>WorldWide new {casesType}</h3>\r\n            <LineGraph className=\"app__graph\" casesType={casesType} />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      <div className=\"app__footer\">{/* <p>&copy; 2020 Shyju S</p> */}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}